  Emil, Mikael and I (Jason) talked about a format for the job file that
  describes how to execute a job; at first, I wanted to do a separate
  configuration language but Mikael convinced me that we should just write the
  jobs in Haskell.

  A jobs files is a file containing a Haskell module that contains these
  values:

    generators              ::  [[(Label, Degree)]]
    field                   ::  FieldSpec
    order                   ::  Order

  The generators are the names of terms in our basis that we start with with;
  the field is describes the field we are working over and the order is how we
  order the terms. The terms are in a lists of lists (or maybe it should be a
  set of sets); the organization of terms into sublists expresses the
  "grading" of the terms.

  The `FieldSpec` is right now a simple data type of two constructors:

    data FieldSpec           =  Finite Prime 
                              | Rationals 
                              | Real Precision
                              | Complex Precision Label

    newtype Prime            =  Prime Integer
    instance Num where
      fromInteger n
        | n == p             =  p  -- At compile time, fails for non-primes. 
       where
        p                    =  (head . dropWhile (< n)) Data.Numbers.Primes

    data Precision           =  Single
                              | Digits Int Int


  The `FieldSpec` could be extended to support other fields although we might
  have some trouble translating them for use with our GrÃ¶bner basis.

  Orders are picked out from the order definitions in Singular; or
  correspondingly from whichever backend package we end up using.

  Referring to http://www.msri.org/about/computing/docs/singular/index.htm
  we get hold of the existing term orders used by Singular, which motivate

    data OrderSpec            =  Lexicographic
                               | ReverseLexicographic
                               | DegreeReverseLexicographic
                               | DegreeLexicographic
                               | WeightedReverseLexicographic [Natural]
                               | WeightedLexicographic [Natural]
                               | NegativeLexicographic
                               | NegativeDegreeReverseLexicographic
                               | NegativeDegreeLexicographic
                               | GeneralWeightedReverseLexicographic [Integer]
                               | GeneralWeightedLexicographic [Integer]
                               | Matrix [[Integer]]

    type Order                = [OrderSpec]

    newtype Natural           = Natural Integer
    instance Num where
      fromInteger n
       | n >= 0               = Natural n
       | otherwise            = error "Naturals are non-negative"

